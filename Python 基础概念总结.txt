Python：
	是一种脚本语言（在运行时“解释”，且需要解释器Java 的JVM）
	C，C++等时编译语言，现先需要编译，在运行
	一行代码太长，可以用 '\' 换行
	argument 实参   parameter 形参

	注释：'''注释''' 一段注释  , # 一行注释  , '注释' 可以用help() 访问__doc__ 
	转义：'\\'' 或者 '/'' 或者 'r' 后面全部转义

	Control+shift+c 停止运行

	属性名：名词定义   函数方法：动词定义

	类和类型 都是 'type'类型	a=int()  b=B()	

	TAB和空格键不能混合用！！！！

	浅拷贝和深拷贝：
	在有指针的情况下，浅拷贝只是增加了一个指针指向已经存在的内存
	深拷贝就是增加一个指针并且申请一个新的内存，使这个增加的指针指向这个新的内存
	copy 只拷贝基本数据类型，deepcopy 会拷贝复杂类型，如 list、dict


静态语言和动态语言：
	静态语言又叫作强类型语言，申明变量时要确定类型（稳定，严谨）
	动态语言又叫作弱类型语言，声明变量时不需要申明类型，类型是由被赋值的那个值的类型（速度快）																


数据类型:
		值类型：修改值类型的值，只是让它指向一个新的内存地址
			整型，浮点型，字符串（长字符串，用'''...''' 
				或者"""..."""申明）,布尔型,元组
		引用类型：修改引用类型的值,改变的值地址里的值,不会改变指向的地址  列表,字典


输入和输出：
	input("提示字符串") (输入的类型为str)
	print(value, ..., sep=' ', end='\n', file=sys.stdout, flush=False)


分支和循环：
	if分支
	if(条件):  
		.....
	else:
		.....
	
	if(条件):
		.....
	elif(条件):
		.....
	elif(条件):
		.....
	else:
		.....			

	assert 断言: 当assert后的条件为false时，程序自动崩溃并抛出AssertionError的异常	
	while循环
	while True:
		循环体

	for循环
	for 目标 in 表达式:
		循环体			
		range([start,] stop [,step=1])
		for each in range(1,10,2):
			循环体
	break         9
	continue


操作符：
		'+' 操作号两边的类型必须相同
		'-'
		'='
		'*' 重复操作符 ['a','b',3]*3 --> ['a', 'b', 3, 'a', 'b', 3, 'a', 'b', 3]
		'/' 不是地板除(floor)
		'//' 地板除
		'%' 求余
		'**' 幂运算(注意优先级) -3**2=-9 ，3**-2=0.11111111
		三元操作符:x if 条件 else y(条件为true取x，false取y)
		比较操作符:>,<,>=,<=,==,!=
		逻辑操作符:and,or,not (not>and>or)
		优先级：幂运算>正负号>算数操作符>比较操作符>逻辑操作符


序列：
	字符串,列表,元组
	内置方法：list(),str(),tuple(),len(),max().min()只能比较相同类型的元素
			sum() 只能数字类型求和 ，sorted(),reversed() 使用后必须转换好类型
			enumberate() 索引值+元素 元组形式 使用后必须转换好类型
			zip( , ) 两个序列以元组结合(少)


字符串：
	str：一旦定义就很难修改(用分片修改)
	str1='ShangHai University'
	str1=str1[:7]+'字符串'+str1[7:]
	一些内置方法：
				upper() 字符串中所有小写都变成大写
				capitalize() 把字符串第一个字符改为大写
				casefold() 把整个字符串所有字符改为小写
				center(width) 将字符串居中,并使用空格填充至width长度
				count(sub[,start[,end]]) 返回sub在字符串中出现的次数，可选范围
				encode(encoding='utf-8',errors='strict') 
												以指定的编码格式对字符串进行编码
				endswith(sub[,start[,end]]) 检查字符串是否以sub结尾,返回True和False
				find(sub[,start[,end]])  检测sub是否在字符串中，如果在返回第一次出现的索引值，没出现返回-1
				index(sub[,start[,end]) 和find类似,如果sub元素没有回产生异常
				replace(old,new[,count]) 替换 count为次数
				strip([要去掉的字符])  默认去空格
				split(sep=None,maxsplit=-1) 默认以空格符切片字符串 最大分割次数

				s.isalnum()  所有字符都是数字或者字母，为真返回 Ture，否则返回 False。
				s.isalpha()  所有字符都是字母，为真返回 Ture，否则返回 False。
				s.isdigit()  所有字符都是数字，为真返回 Ture，否则返回 False。
				s.islower()  所有字符都是小写，为真返回 Ture，否则返回 False。
				s.isupper()  所有字符都是大写，为真返回 Ture，否则返回 False。
				s.istitle()  所有单词都是首字母大写，为真返回 Ture，否则返回 False。
				s.isspace()  所有字符都是空白字符，为真返回 Ture，否则返回 False。				
				
	格式化：% 和 format() 两种方法
			%c and %c' % (97,98) --> a and b
			%s: 格式化字符串   %d:格式化整数    %o:格式化无符号八进制
			%x: 格式化无符号十六进制

			'{0} love {1}'.format('I','Python') (两种参数：位置参数{0},
			关键字参数{a}, 一起用的情况 位置参数要放在前面)
			{{}}.format() 来打印 {}
			'{0:0.1f}{1}'.format(27.658,'GB') 


列表 list：
	可以放不同类型的数据的数组
	member=['a',1,'c',[1,2,'s']]   # 2 in member[3] --> True
	获取: member[索引值]

	添加元素：member.append(只能有一个参数) (添加在尾部)
			member.append([1,2]) --> ['a',1,'c',[1,2,'s'],[1,2]]

	扩展: member.extend([列表]) (添加在尾部)
			member.extend([1,2]) --> ['a',1,'c',[1,2,'s'],1,2]

	插入：member.insert((索引位置)，添加的元素)
			member.insert(0,'r') --> ['r','a',1,'c',[1,2,'s']]

	删除：member.remove(元素)
		del member([索引])
		member.pop((索引值)) 弹出元素 (默认弹出最后一个)

	分片: member[开始索引值:结束索引值(不包括)]	
			member[:2] --> ['a',1]
			拷贝列表 member1=member[:] (获得的是新列表 不同的地址)
					member1=member (指向相同的地址)

	比较:默认比较列表的第一个值(字符串比较第一个字符ASCII的大小)

	count: member.count(元素) 元素在列表中出现的次数

	index: member.index(元素,范围) 元素的索引位置

	reverse: member.reverse()  翻转

	sort: member.sort(列表里必须全是数字) 排序 (默认从小到大排序)
		member.sort(func(排序的算法 默认归并排序),key,reverse=False(默认))


元组 tuple：
	不能随意插入，删除，改变的列表
	定义：tuple1=(1,'a','o',8,1)
	tuple1=(1) 不是元组 , tuple1=1 是元组 , tuple1=1,2,'a',6 是元组
	分片和列表一样

	间接更新元组 tuple1=tuple1[:1]+('t',)+tuple1[1:]
	同方法间接删除


函数：
	def function(形参(可以赋初值)):
		代码块
		(return ...)

	关键字参数：def test(temp,temp1):
					代码块
					test(temp1=1,temp=2)	
		
	收集参数(不定长参数)
		def test(*params):
			代码块	

	全局变量和局部变量：
		局部变量在函数内定义，作用域函数内(当创建或修改的局部变量时和全局变量
			同名时，隐藏全局变量) 修改时 可以用 global 全局变量名 
		全局变量在函数外定义，作用域整个模块		
		

内嵌函数和闭包：
	def	fun1():
		代码段
		def fun2():
			代码段	
		fun2()     #调用 且只有fun1能调用	

		def funx():
			x=5
			def funy():
				nonlocal x    # 在内部函数变量前+nonlocal 可以修改外部变量
				x*=x
				return x
			return funy()	   #return 函数() 表示调用这个函数 
							(不加括号表示返回这个函数所在位置)


匿名函数：
	g=lambda x,y(形参): 2 * x + 1 
	g(x,y(实参))
	优点：不用定义,更加简洁,不用考虑命名,增加代码可读性
	bif：
		filter() 过滤器
			filter(function or None(所要调用函数), iterable(可迭代的元素))

		map() 加工
			使用和filter一样

	列表推导式：代替filte()和lambda组合的的作用
		[i for i in range(1,100) if i%3==0]		


递归：
	函数调用自己本身
	修改递归深度：
		import sys
		sys.setrecursionlimit(1000)

	阶层：
		迭代法：
			def jieceng(n):
				if n==1:
					return 1
				temp=n	
				while n>1:
					temp*=n-1
					n-=1
				return temp		
		递归法：
			def jieceng(n):
				if n==1:
					return 1
				while n>1:
					return n*jieceng(n-1)

	斐波那契数列：
		迭代法：
			def feibonaqi(n):
			if n==1 or n==2:
				return 1
			n1=1
			n2=1
			n3=1	
			while n>2:
				n3=n2+n1
				n1=n2
				n2=n3
				n-=1
			return n3
		
		递归法：
			def feibonaqi(n):
				if n==1 or n==2:
					return 1
				else:
					return feibonaqi(n-1)+feibonaqi(n-2)

		汉诺塔：
			def hannuota(n,x,y,z):
				if n==1:
					print(x,' -->', z)
				else:
					hannuota(n-1,x,z,y) # 把上面的n-1个从x移动到y
					print(x,' -->', z)  #把最后一个从x移动到z
					hannuota(n-1,y,x,z)	 #把y上的n-1个移动到z


字典：
	dict1={key(键):value(值),.......}
	dict1[键]
	键和值一一对应 
	可以修改

	bif: dict1.fromkeys((键),值)  创建新字典
	dict1.keys()  dict1.values()  dict1.items()
	dict1.get(键(,值)) 但键所对应的值不存在时 返回None或(默认值)  
	dict1.clear()  清空字典
	dict1.copy() 浅拷贝 (只拷贝父类对象 子类对象改变时受影响) id()
	dict1.popitem()  随机弹出一个映射关系
	dict1.setdefault(键(,值)) 添加一个映射关系
	dict1.update(完整的映射关系)  
   

集合：
	没有映射关系的字典，即没有value值，集合内的值不能有重复的
    且集合是无序的（和数学的集合类似）
    定义：set1={1，2，3,4}
	      set1=set([1,2,3,4]) 工厂函数定义
    bif：add()增加,remove()移除
    frozenset:不能变化的集合  


文件：
	打开：f=open(file(路径),mode='r'(打开方式：只读，写入等),buffering=-1,.....)
		例：f=open(r"C:\Users\10096\Desktop\学习进程.txt")
		r	以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。
		w	打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。
		a	打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已	有内容之后。如果该文件不存在，创建新文件进行写入。
		rb	以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。
		wb	以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。
		ab	以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将	会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。
		r+	打开一个文件用于读写。文件指针将会放在文件的开头。
		w+	打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。
		a+	打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文	件不存在，创建新文件用于读写。
		rb+	以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。
		wb+	以二进制格式打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。
		ab+	以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创	建新文件用于读写。

	关闭：f.close()  完成写入操作后关闭

	读取：f.read(size=-1)  按字节读取  默认读完
		f.readline() 按一行读取 只读取一行

		文件指针（书签：读到哪里，指针就停在那）:f.tell() (一个中文字符占两个字节)
		f.seek(offset,from):在文件中移动指针，从from（0代表文件的起始位置，1代表当前					位置，2代表文件末尾） 偏移 offset 个字节 	
							！！注意：偏移字节可能会把中文字符分开，导致乱码
		例：f.seek(5,0) 从文件开始往后偏移5个指针

	写入：（确保打开方式为 'w','a'）
		写入字符串
		f=open('E:/123.txt','w')
		f.write('Python 文件写入练习')
		f.close()

		f=open('E:/123.txt','a')
		f.write('学习中。。。')
		f.close()

		写入字符串序列
		f.writelines(seq) 


文件操作：
	分割，保存文件：
	def save_file(i,you,count):
		file_name_i='E:/i_'+str(count)+'.txt'
		file_name_you='E:/you'+str(count)+'.txt'

		i_file=open(file_name_i,'w')
		you_file=open(file_name_you,'w')

		i_file.writelines(i)
		you_file.writelines(you)

		i_file.close()
		you_file.close()
	 	

	def split_file():
		f=open('E:/test.txt')

		i=[]
		you=[]
		count=1

		for eachline in f:
			if eachline[:6] != '======':
				#进行分割
				(role,line_sopken)=eachline.split(':',1)
				if role == '我':
					i.append(line_sopken)
				if role == '你'	:
					you.append(line_sopken)
			else:
				#文件的分别保存
				save_file(i,you,count)

				i=[]
				you=[]
				count+=1

		save_file(i,you,count)	

		f.close()	
	split_file()


OS模块：
	Operating System 操作系统模块
	os.getcwd() 返回当前工作目录
	os.chdir(path) 改变工作目录
	os.listdir(path) 列举目录中的文件和文件夹名('.' 当前目录,'..' 上一级目录)
	os.mkdir(path) 创建单目录,如果目录已存在抛出异常(一次只能创建一个)
	os.makedirs() 递归创建多层目录，如该目录已存在则抛出异常,'E:/a/b'和'E:/a/c' 不冲突(多个)
	os.remove() 删除文件 文件不存在抛出异常
	os.rmdir() 删除文件夹 文件夹必须为空
	os.removedirs() 递归删除所有目录 必须为空
	os.rename(old,new) 
	os.system.(command) 运行系统的shell命令
	os.curdir 当前目录 (windows linux '.')
	os.pardir 上一级目录 (windows linux '..')
	os.sep 当前系统的分隔符 /or\
	os.walk(top, topdown=True, onerror=None, followlinks=False) 
		可以得到一个三元tupple(dirpath, dirnames, filenames), 
		第一个为起始路径，第二个为起始路径下的文件夹，第三个是起始路径下的文件。


OS.path模块：
	os.path.basename(path) 去掉路径，返回文件名 文件不存在时不抛出异常也不创建
	os.oath.dirname(path) 去掉文件名，返回路径  文件不存在时不抛出异常也不创建
	os.path.join(path1[,path2[,path3[,.....]]])  将各部分组成一个路径名 不创建
	os.path.splitext(path) 分离路径和文件名 会把最后一个作为文件类型
	os.getsize(file)  单位字节
	os.path.getatime(file)  文件的最近访问时间(返回浮点型) time.localtime() 
	os.path.getctime(file)  文件的创建时间
	os.path.getmtime(file)  文件的最新修改时间
	os.path.exists(path)  判断目录或文件是否存在
	os.path.isabs(path)  判断指定路径是否为绝对路径
	os.path.isdir(path)  判断指定路径是否存在且是一个目录
	os.path.isfile(path)  判断指定路径是否存在且是一个文件
	os.path.islink(path)  判断指定路径是否存在且是一个符号链接
	os.path.ismount(path)  判断指定路径是否存在且是一个挂载点
	os.path.samefile(path1,path2)  判断path1和path2两个路径是否指向同一个文件


pickle模块：
	将一些复
	杂的数据类型转化为二进制文件 写入和读取的时候必须要用二进制
	import pickle
	my_list=[123,3.14,'Python',[1,'s']]
	pickle_file=open('my_list','wb')
	pickle.dump(my_list,pickle_file)   # pickle.dump()  
	pickle_file.close()
	pickle_file=open('my_list','rb')
	my_list2=pickle.load(pickle_file)  # pickle.load() 转化为为类型
	print(my_list2)
	pickle_file.close()		

	代码中有大量的数据可以通过放入泡菜，要使用时在load的方法是代码看上去更加简洁明了


异常处理：
	常见异常：
		assert 当后面的的语句返回false时 抛出assert异常
		AttributeError 尝试访问未知的对象属性
		IndexError 索引超出范围
		KeyError 字典中查找一个不存在的关键字
		NameError 访问一个不存在的变量
		OSError 操作系统异常
		SyntaxError 语法错误

	检测和处理异常：
		try：
			检测范围
		except Exception[as reason]:	
			出现异常(Exception) 后的处理代码
		finally:
			都会被执行的代码	

		try:
			f=open('Python.txt')
			print(f.read())
			f.close()
		except OSError as reason:
			print('文件出错\n错误的原因是：'+str(reason))
		except ......	
		finally:
			一般关闭打开的文件，数据库

		自定义异常：


丰富的else使用和简洁的with使用：
	和while(循环)一起使用：当循环结束时执行else的内容,循环跳出时不执行
		def showMaxFactor(num):
			count=num//2
			while count>1:
				if(num%count==0):
					print('%d最大的约数是%d' % (num,count))
					break
				count-=1
			else:
				print('%d是素数' % num)
		num=int(input('请输入一个数：'))
		showMaxFactor(num)		

	和异常处理一起使用：
		当try中的语句正常执行时，else里的也会执行，有异常则不会执行

	使用了with 当文件不用，他会帮助关闭文件，而不用手动关闭
	try:
		with open ('E:/Python.txt','w') as f:
			print(f.read())
	except OSError as reason:
		print('错误',+str(reason))	


Easygui Python图形界面:
	import easygui as name
	name.msgbox()


类和对象：
	class 类名(继承的类型):  #类名首字母大写	
		定义属性
		定义方法(self):  #方法名首字母小写
	对象名=	类名()

	多态：不同对象对同一方法的不同实现

	self:
	类：设计图纸  对象：房子  self：门牌号
	调用对象的方法时，方法会把自己传给self 让类中的方法知道是哪个对象在调用
	class Dog:
	def setName(self,name):
		self.name=name
	def	showname(self):
		print('I am %s ' % self.name)

	构造方法：
		class Cat(object):
			"""docstring for Cat"""
			def __init__(self, name='折耳'):
				super(Cat, self).__init__()
				self.name=name
			def show(self,noise):
				print('I am %s , %s'        % (self.name,noise='喵喵喵'))
	
	公有，私有：
		默认对象的属性和方法都是公有的	

		私有：
			在属性或者函数名前加 __ 表示私有
			实质上是伪私有 name mangling 把 __变量 改名成 _类名__变量名

	继承：
		class 子类名(父类名):
			....
		子类继承父类所有的属性和方法，同名属性和方法覆盖父类中的	

		super().__init__()调用父类的构造函数

		支持多重继承
		class 类名(父类名,父类名,父类名)

	组合：
		把类的实例化放在一个新的类中，把没有继承关系的横向的类放在一起
		class Cat:
			def __init__(self,x):
				self.num=x
		class Dog:
			def __init__(self,y):
				self.num=y				
		class Home:
			def __init__(self,x,y):
				self.cat=Cat(x)
				self.dog=Dog(y)
			def print_num(self):
				print('家里有%d只猫，%d只狗'%(self.cat.num,self.dog.num))		

	处处都是对象！！！！				

	类和对象常用bif：
		issubclass(子类,基类)：
			类本身也可以看成是自己的子类
			第二参数可以是类的元组，只要其中一个是class的基类 返回true

		isinstance(实例,类)	:
			和issubclass类似

		hassattr(实例对象,'属性')：
			属性是否存在于实例对象中	

		getattr(实例对象,'属性'[,'default']):
			找出实例对象中的属性并返回它的值 若不存在则返回default字符串

		setattr(实例对象,'属性','值')：
			找出实例对象中的属性 并给它赋值

		delatter(实例对象,'属性'):
			删除实例对象中的属性 如不存在则抛出异常	

		property(获取方法,设置方法方法,删除方法,doc=None):	
			class A(object):
			    """docstring for A"""
			    def __init__(self, value):
			        super(A, self).__init__()
			        self.size=value
			    def getSize(self):
			        return self.size
			    def setSize(self,value):
			        self.size=value
			    def delSize(self):
			        del self.size
			    
			    x=property(getSize, setSize, delSize)

			a1=A(2)
			print(a1.x)                         
			a1.x=3
			print(a1.x)
			del a1.x
			a1.x=5
			print(a1.x)

	类中常用的魔法方法(__name__)
		__init__(self[,...]):
			构造方法 不能有返回值		

		__new__(class[,....])
		
		__del__(self):
			析构方法	引用不指向对象时 自动调用

		___add__(self,other):
			等可以重写	
			class int(int):
				def __add__(self,other):
					return int.__sub__(self,other)
					pass
			print(int(1)+int(2))	
			
		反运算：
			class Rint(int):
				def __rsub__(self,other):
					return int.__sub__(other,self)
					pass
			print(6-Rint(2))

		属性访问：
			__getattr__(self,name):
				当时图获取一个不存在的属性是自动调用
			__getattribute__(self,name):
				当该类的属性被访问时
			__setattr__(self,name,value):
				当一个属性被设置时的行为
			__delattr__(self,name):
				当一个属性被删除时的行为	

			一般重写 魔法方法 都会调用基类的方法					



计时器：
	import time

	class MyTimer(object):
		def __init__(self):
			self.prompt='未开始计时'
			self.unit=['年','月','日','时','分','秒']
			self.lasted=[]
			self.begin=0
			self.end=0
			pass
		def __str__(self):
			return self.prompt	

		__repr__=__str__	`


		def __add__(self,other):
			prompt='总共运行了'
			result=[]
			for index in range(6):
				result.append(self.lasted[index]+other.lasted[index])
				if result[index]:
					prompt+=(str(result[index])+self.unit[index])
			return prompt		

		#开始计时
		def start(self):
			self.begin=time.localtime()
			self.prompt='请先调用stop() 停止计时'
			print('计时开始')

		#停止计时
		def stop(self):
			if not self.begin:
				print('请先调用start() 开始计时')
			else:	
				self.end=time.localtime()
				print('停止计时')
				self.eachtime()
			pass

		#计算运行时间
		def eachtime(self):
			self.lasted=[]
			self.prompt='运行了'
			for index in range(6):
				self.lasted.append(self.end[index]-self.begin[index])
				self.prompt+=(str(self.lasted[index])+self.unit[index])	
			self.begin=0
			self.end=0		


描述符：
	property 一种描述符
	将某种特殊类型的类的实例指派给另一个类的属性
	特殊类是一个实现以下三个方法中任意一个的类：
		__get__(self,instance,owner):
			访问属性，返回属性的值
		__set__(self,instance,value):	
			属性奉陪赋值时调用，不返回任何内容 
		__delete__(self,instance):
			控制删除操作，不返回任何内容	
		self :描述符类本身的实例 
		instance:拥有者的实例
		owner:拥有者


迭代器：
	字典，字符串，列表等都是迭代器


模块：
	模块化编程	
	if __name__="__main__" 
		test()
	在模块中的测试部分，在调用处不执行

	搜索路径：
		import sys
		sys.path.append('路径') #添加搜索路径

	包：
		可以把不同模块放在不同文件夹	
		1.创建一个文件夹，存放相关的模块文件夹名字就是包的名字
		2.在文件夹中创建一个__init__.py的模块文件，内容可以为空
		3.调用 import 包名.模块名


爬虫：
	urllib.parse 解析
	import urllib.request
	url='....'
	response=urllib.request.urlopen(url,data)
	# data默认NONE 赋值后POST 否则GET 且必须是一个特殊格式：用urllib.parse.urlencode()转化

	隐藏：
		1：在response之前 
			加 head{}
				head['User-Agent']='正常访问'

		2:在response之后
			动态添加 response.add_header('User-Agent','正常访问')

		req=urllib.request.Request(url,data)
		req.add_header('User-Agent','Mozilla/5.0 (Windows NT 10.0; WOW64) 			AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36')
		response=urllib.request.urlopen(url,data)			

		延迟提交时间：
			工作效率慢

		代理：
			1.参数是一个字典{'类型':'代理ip:端口号'}
				prosy_support=urllib.request.ProxyHandler({})
			2.定制、创建一个opener
				opener=urllib.request.build_opener(proxy_support)
			3.安装opener
			4.调用opener	

Mysql使用：
	import pymysql

	# 打开数据库连接
	db = pymysql.connect("localhost","xcm","5jiu2DNF","scraping" )

	# 使用 cursor() 方法创建一个游标对象 cursor
	cursor = db.cursor()

	# 使用 execute()  方法执行 SQL 查询 
	cursor.execute("SELECT VERSION()")

	# 使用 fetchone() 方法获取单条数据.
	data = cursor.fetchone()

	print ("Database version : %s " % data)

	# 关闭数据库连接
	db.close()					